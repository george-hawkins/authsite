#!/bin/bash -e

function error {
    echo "Error: $*" >&2
    exit 1
}

function confirm {
    echo -n "$* [y] "
    read answer

    if [[ -n $answer && ${answer,,} != 'y' ]]
    then
        exit 0
    fi
}

if [[ -z $(git branch --list heroku) ]]
then
    error 'you must create a branch called heroku first'
fi

if ! git remote | egrep -q '^heroku$'
then
    error 'you must add a remote called heroku'
    # git remote add heroku https://git.heroku.com/<app-name>.git
fi

if ! git diff --quiet
then
    error 'there are uncommitted changes in the current branch'
fi

current=$(git rev-parse --abbrev-ref HEAD)

if [ "$current" == heroku ]
then
    error 'you are on the heroku branch'
    # You should be on the branch you want to merge to the heroku branch.
fi

# Warn if the scripts exits but hasn't returned us to the original branch.
function cleanup {
    branch=$(git rev-parse --abbrev-ref HEAD)
    if [ "$branch" != "$current" ]
    then
        echo "Warning: you are now on $branch" >&2
    fi
}
trap cleanup EXIT

confirm "Merge $current to heroku branch and push result to heroku?"

git checkout heroku

# Accept the default merge comment without giving user opportunity to edit it.
git merge --no-edit "$current"

jekyllSiteDir=src/main/jekyll-site

rm -rf $jekyllSiteDir

mvn --quiet clean generate-resources -DskipTests -D"jekyll.site.dir=$jekyllSiteDir"

# Either add for first time or add changes.
git add --all $jekyllSiteDir
# Note: --all causes git to mark files that are no longer there as removed, i.e. adds and removes may occur.

if ! git diff --staged --quiet
then
    git commit -m 'Updated generated site.'
fi

confirm "Ready to push, continue?"

# Push - potentially nuking old content if it is unrelated to this repo and branch.
git push --force heroku heroku:master

echo "Leaving heroku branch and returning to $current branch..."
git checkout "$current"
echo "Done."
